import {
  WASI,
  File,
  OpenFile,
  ConsoleStdout,
  PreopenDirectory,
} from "npm:@bjorn3/browser_wasi_shim";
import ghc_wasm_jsffi from "./ghc_wasm_jsffi.js"; // autogenerated during build step
import examples from "./examples.js";

const config = {
  prompt: "IMP> ",
  welcome: "Welcome to the IMP REPL! Enter :help to list available metacommands.",
};

class Terminal extends globalThis.Terminal {
  constructor() {
    super({
      cursorBlink: true,
      fontFamily: '"CommitMono", "Courier New Bold"',
      fontSize: 13,
    });
    this.input = "";
    this.cursor = 0;

    const div = document.getElementById("terminal");
    div.focus();
    this.open(div);

    // move this to WASM
    this.writeln(config.welcome);
    this.write(config.prompt);

    this.onKey((e) => {
      const { key, domEvent: ev } = e;
      const printable = !ev.altKey && !ev.ctrlKey && !ev.metaKey;

      // CR
      if (ev.keyCode === 13) {
        const line = this.input;
        this.input = "";
        this.cursor = 0;
        this.writeln("");
        if (line.trim() != "" && this.onInputSubmit) {
          this.onInputSubmit(line);
        }
        this.prompt();
      }
      // BS
      else if (ev.keyCode === 8) {
        if (this.cursorPos > 0) {
          this.input = this.input.substring(0, this.cursor - 1);
          this.writeln(this.input);
          this.cursor--;
        }
      }
      // otherwise
      else if (printable && key) {
        this.input += key;
        this.cursor++;
        this.write(key);
      }
    });
  }

  prompt() {
    this.write(config.prompt);
    this.input = "";
    this.cursor = 0;
  }

  setInputHandler(callback) {
    this.onInputSubmit = callback;
  }
}

class IMPLI {
  constructor() {
    this.exports = {};
    this.terminal = new Terminal();
    this.terminal.setInputHandler((input) => this.interpret(input));
  }

  async init() {
    const encoder = new TextEncoder("utf-8");
    const fds = [
      new OpenFile(new File([])), // stdin
      ConsoleStdout.lineBuffered((msg) => this.terminal.writeln(msg)), // stdout
      ConsoleStdout.lineBuffered((msg) => console.warn(`[WASI stderr] ${msg}`)), // stderr
      new PreopenDirectory(
        ".",
        Object.entries(examples).map(([filename, content]) => {
          return [filename, new File(encoder.encode(content))];
        }),
      ), // .
    ];

    const wasi = new WASI([], [], fds);
    const wasm = await WebAssembly.instantiateStreaming(fetch("./impli.wasm"), {
      wasi_snapshot_preview1: wasi.wasiImport,
      ghc_wasm_jsffi: ghc_wasm_jsffi(this.exports),
    });

    wasi.initialize(wasm.instance);
    Object.assign(this.exports, wasm.instance.exports);

    this.pointer = this.exports.initialize();
    return this;
  }

  async interpret(input) {
    // const response = setTimeout(await this.exports.execute(this.pointer, input), 0);
    const response = await this.exports.execute(this.pointer, input);
    console.log(response);
  }
}

(async () => {
  globalThis.impli = await new IMPLI().init();
})();
