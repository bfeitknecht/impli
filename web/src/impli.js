import { Terminal } from "xterm";
import { openpty } from "pty";
import { WASI, PreopenDirectory, ConsoleStdout } from "shim";
import files from "./examples.js";
import { Stdio } from "./stdio.js";
// import hookup from "./hookup.js";
import stub from "./jsffi.js"; // INFO: autogenerated during build

export class Impli {
  constructor() {
    this.exports = {};
    this.terminal = new Terminal({
      cursorBlink: true,
      fontFamily: '"CommitMono", "Courier New Bold", monospace',
      fontSize: 13,
    });
    this.terminal.open(document.getElementById("terminal"));
    const { master, slave } = openpty();
    this.slave = slave;
    this.terminal.loadAddon(master);
  }

  async init() {
    const inodes = new Map(Object.entries(files));
    const fds = [
      /*
      new Stdio(this.slave), // stdin
      new Stdio(this.slave), // stdout
      ConsoleStdout.lineBuffered((str) => console.warn(str)), // stderr // CHECK: better option?
      new PreopenDirectory(".", inodes), // .
      */
      new Stdio(this.slave),
      new Stdio(this.slave),
      // ConsoleStdout.lineBuffered((str) => this.slave.write(str + "\n")),
    ];

    const wasi = new WASI([], [], fds);
    const wasm = await WebAssembly.instantiateStreaming(fetch("./impli.wasm"), {
      wasi_snapshot_preview1: wasi.wasiImport,
      ghc_wasm_jsffi: stub(this.exports),
    });

    wasi.initialize(wasm.instance);
    Object.assign(this.exports, wasm.instance.exports);

    return this;
  }

  serve() {
    this.exports.serve();
  }
}
