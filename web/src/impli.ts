import { Terminal } from "xterm";
import { openpty } from "pty";
import { WASI, File, PreopenDirectory, ConsoleStdout } from "npm:@bjorn3/browser_wasi_shim";
// import { WASI, File, OpenFile, ConsoleStdout, PreopenDirectory, } from "shims";
import files from "./examples.ts";
import { Stdio } from "./stdio.ts";
import ghc_wasm_jsffi from "./ghc_wasm_jsffi.js"; // INFO: autogenerated during build

export class Impli {
  exports: any = {};
  terminal = new Terminal({
    cursorBlink: true,
    fontFamily: '"CommitMono", "Courier New Bold", monospace',
    fontSize: 13,
  });
  slave: any;
  constructor() {
    this.terminal.open(document.getElementById("terminal")! as HTMLElement);
    const { master, slave } = openpty();
    this.slave = slave;
    this.terminal.loadAddon(master);
  }

  async init() {
    const inodes: Map<string, File> = new Map(Object.entries(files));
    const fds = [
      new Stdio(this.slave), // stdin
      new Stdio(this.slave), // stdout
      ConsoleStdout.lineBuffered(console.warn), // stderr // CHECK: better option?
      new PreopenDirectory(".", inodes), // ./
    ];

    const wasi = new WASI([], [], fds);
    const wasm = await WebAssembly.instantiateStreaming(fetch("./impli.wasm"), {
      wasi_snapshot_preview1: wasi.wasiImport,
      ghc_wasm_jsffi: ghc_wasm_jsffi(this.exports),
    });

    wasi.initialize(wasm.instance as any);
    Object.assign(this.exports, wasm.instance.exports);

    return this;
  }

  serve() {
    this.exports.serve();
  }
}
