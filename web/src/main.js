import { WASI, PreopenDirectory, ConsoleStdout } from "shim";
import { Terminal } from "xterm";
import { openpty } from "pty";
import { FitAddon } from "fit";
import files from "./examples.js";
import stub from "./jsffi.js"; // INFO: autogenerated during build

const div = document.getElementById("terminal");
const terminal = new Terminal({
  cursorBlink: true,
  fontFamily: '"CommitMono", "Courier New Bold", monospace',
  fontSize: 13,
});
terminal.open(div);

const { master, slave } = openpty();
terminal.loadAddon(master);

const fitter = new FitAddon();
terminal.loadAddon(fitter);
new ResizeObserver(() => fitter.fit()).observe(div);
fitter.fit();

const worker = new Worker("./worker.js");
const inodes = new Map(Object.entries(files));
const fds = [
  undefined, // stdin
  undefined, // stdout
  ConsoleStdout.lineBuffered((str) => console.warn(str)), // stderr
  new PreopenDirectory(".", inodes), // .
];

const wasi = new WASI([], [], fds);
const wasm = await WebAssembly.instantiateStreaming(fetch("./impli.wasm"), {
  wasi_snapshot_preview1: wasi.wasiImport,
  ghc_wasm_jsffi: stub(this.exports),
});

wasi.initialize(wasm.instance);
Object.assign(this.exports, wasm.instance.exports);
