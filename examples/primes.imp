// compute the n-th prime number
procedure prime(n; p) begin
    // compute the floored square root
    procedure sqrtfloor(n; r) begin
        r := 1;
        temp := 1;
        while temp <= n do
            r *= 2;
            temp := r * r
        end;
        while temp > n do
            r -= 1;
            temp := r * r
        end
    end;
    candidate := 1;
    count := 0;
    while count < n do
        candidate += 1;
        if candidate = 2 or candidate = 3 then
            prime := 1
        else
            i := 2;
            prime := 1;
            sqrtfloor(candidate; sqrt);
            while i <= sqrt and prime = 1 do
                q := candidate / i;
                r := candidate % i;
                if r = 0 then
                    prime := 0
                end;
                if i = 2 then
                    i := 3
                else
                    i += 2
                end
            end
        end;
        if prime = 1 then
            count += 1
        end
    end;
    p := candidate
end
